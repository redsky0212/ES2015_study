## [ES2015] #########################
* let
 - block단위 스코프 변수.
 - block스코프이기때문에 closure함수에서 참조변수 i가 콜백호출시 값이 다름.
  var list = ['a', 'b', 'c'];
  for(var또는let i=0;i<list.length; i++){
    a.addEventListener('click', function(){
      console.log(i);
    });
  }

* const
 - 상수 (값의 변화가 없는)
 - 하지만 array, object는 값을 추가하거나 변경이 가능. 값을 수정가능하다. 값 자체를 재할당만 제한을 둠.
 - const를 기본으로 사용하고 이 후 변화가 필요할 경우 let으로 교체.
 - 그렇다면 immutable array는 어떻게 만드나? 방법...
   최초 할당 값을 유지하기위한 코딩
   const list = ['apple', 'orange', 'watermelon'];
   list2 = [].concat(list, 'banana'); // list를 유지하고 list2를 새롭게 만드는 형태...

* ES2015 String에 새로운 메서드.
 - ( startsWidth() ) : 인자값의 문자로 시작하는지 여부.
 - ( endsWidth() ) : 인자값의 문자로 끝나는지 여부.
 - ( includes() ) : 인자값의 문자와 매칭되는 문자가 있는지 여부.


* for of  (Array의 순회)
  - array나 String을 모두 순회할 수 있다.
  - for in 순회시 상위function나 object를 같이 순회하므로 array는 for in 을 사용하지 않는게 좋음.
  - 그로인해 for of를 이용하여 array에서도 오류없이 해당 배열값만 순회할 수 있게 됨.
  - string을 for of로 순회할 경우 'hello'를 순회하면 'h','e','l','l','o'를 모두 순회한다. 참고...

* Array spread operator (펼침 연산자) [...]
 - 배열을 펼쳐서 따로 변수에 저장한다는 뜻
  var a = ['a','b',100]; var b = [...a]; // var a = ['a','b',100]; var b = ['a','b',100]; 이 코드와 같은것.
  (배열 a와 b는 메모리상에 서로 참조하지 않는 별개의 변수)

* spread operator의 활용
 - 특정배열 사이에 쉽게 끼워 넣을 수 있음.
   var a = ['a','b',100]; var b = [1, 2, ...a, 3]; 
 - 매개변수 펼쳐 넘기기 (기존에는 .apply나 .call을 사용하여 코딩함. )
   function sum(a,b,c){ return a+b+c; }
   let pre = [100,200,300];
   sum(...pre);

* from메서드 (Array)
 - 배열형태이지만 배열이 아닌 값.. (예 : arguments)을 배열로 만들어주는 메서드.
   let newArr = Array.from(arguments);

* Array의 filter, from 메서드와 String의 includes메서드를 이용한 실습.